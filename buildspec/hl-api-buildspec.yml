version: 0.2

env:
  variables:
    DOTNET_SYSTEM_GLOBALIZATION_INVARIANT: "1"

phases:
  install:
    runtime-versions:
      dotnet: 8.0
    commands:
      - 'echo "==> Install phase"'
      - 'aws --version || true'
      - 'docker --version || true'

  pre_build:
    commands:
      - 'echo "==> Restoring and publishing .NET project"'
      - 'pushd hl-api'
      - 'dotnet restore -r linux-x64 -v minimal'
      - 'dotnet publish -c Release -r linux-x64 --no-self-contained -o ./publish/linux-x64'
      - 'popd'
      - 'echo "==> Logging into Amazon ECR"'
      - 'ECR_REGISTRY=$(echo "$REPOSITORY_URI" | cut -d"/" -f1)'
      - 'aws ecr get-login-password --region "$AWS_DEFAULT_REGION" | docker login --username AWS --password-stdin "$ECR_REGISTRY"'
      - 'IMAGE_TAG="$(echo "$CODEBUILD_RESOLVED_SOURCE_VERSION" | cut -c1-7)-${CODEBUILD_BUILD_NUMBER}"'
      - 'echo "Using image tag: ${IMAGE_TAG}"'

  build:
    commands:
      - 'echo "==> Building Docker image"'
      - 'docker build --platform linux/amd64 -f hl-api/Dockerfile.runtime -t "${REPOSITORY_URI}:${IMAGE_TAG}" hl-api'
      - 'docker tag "${REPOSITORY_URI}:${IMAGE_TAG}" "${REPOSITORY_URI}:latest"'

  post_build:
    commands:
      - 'echo "==> Pushing Docker images"'
      - 'docker push "${REPOSITORY_URI}:${IMAGE_TAG}"'
      - 'docker push "${REPOSITORY_URI}:latest"'
      - 'printf ''[{"name":"%s","imageUri":"%s"}]'' "$CONTAINER_NAME" "${REPOSITORY_URI}:${IMAGE_TAG}" > imagedefinitions.json'
      - 'cat imagedefinitions.json'

artifacts:
  files:
    - imagedefinitions.json
